---
{% for namespace, queues in env.items() %}
{% if namespace != "default" %}
apiVersion: v1
kind: Namespace
metadata:
  name: {{ namespace }}

---

{% endif %}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis-{{ namespace }}-deployment
  namespace: {{ namespace }}
spec:
  selector:
    matchLabels:
      app: redis
  strategy:
    type: Recreate
  template:
    metadata:
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9121"
      labels:
        app: redis
    spec:
      containers:
        - name: redis
          image: redis:latest
          ports:
            - containerPort: 6379
          volumeMounts:
            - name: redis-{{ namespace }}-persistent-storage
              mountPath: /data
        - name: redis-exporter
          image: oliver006/redis_exporter
          args:
            - "--redis.addr=redis-{{ namespace }}-service:6379"
          ports:
            - containerPort: 9121
      volumes:
        - name: redis-{{ namespace }}-persistent-storage
          persistentVolumeClaim:
            claimName: redis-{{ namespace }}-pv-claim

---
apiVersion: v1
kind: Service
metadata:
  name: redis-{{ namespace }}-service
  namespace: {{ namespace }}
spec:
  selector:
    app: redis
  ports:
    - protocol: TCP
      port: 6379

---
apiVersion: v1
kind: Service
metadata:
  name: redis-{{ namespace }}-exporter-service
  namespace: {{ namespace }}
spec:
  selector:
    app: redis-exporter
  ports:
    - protocol: TCP
      port: 9121

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: redis-{{ namespace }}-pv-claim
  namespace: {{ namespace }}
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
---


{% for queue_name in queues.queues %}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: app-{{ namespace }}-{{ queue_name }}-deployment
  namespace: {{ namespace }}
spec:
  selector:
    matchLabels:
      app: app-{{ namespace }}-{{ queue_name }}
      queue: {{ queue_name }}
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: app-{{ namespace }}-{{ queue_name }}
        queue: {{ queue_name }}
    spec:
      containers:
        - name: app-{{ namespace }}-{{ queue_name }}
          image: {{ image }}
          ports:
            - containerPort: 8000
          env:
            - name: REDIS_HOST
              value: "redis-{{ namespace }}-service"
            - name: REDIS_PORT
              value: "6379"
            - name: QUEUE_NAME
              value: "{{ queue_name }}"
            - name: ENV
              value: "{{ namespace }}"
---
apiVersion: v1
kind: Service
metadata:
  name: app-{{ namespace }}-{{ queue_name }}-service
  namespace: {{ namespace }}
spec:
  selector:
    app: app-{{ namespace }}-{{ queue_name }}
    queue: {{ queue_name }}
  ports:
    - protocol: TCP
      port: 8000

---
apiVersion: traefik.io/v1alpha1
kind: IngressRoute
metadata:
  name: app-{{ namespace }}-{{ queue_name }}-ingress
  namespace: {{ namespace }}
spec:
  entryPoints:
    - web
  routes:
    - match: Host(`{{ namespace }}-{{ queue_name }}.{{ base_domain }}`)
      kind: Rule
      services:
        - name: app-{{ namespace }}-{{ queue_name }}-service
          port: 8000
---
{% endfor %}
---
{% endfor %}